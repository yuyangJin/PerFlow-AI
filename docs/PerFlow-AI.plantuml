@startuml

' The core of PerFlow-AI is the trace, 
' which flows through the workflow diagram
namespace core{
    ' Different event types
    enum EventType{
        OPRT 
        COMM
        FWD
        BWD
        WGT
    }

    ' Basic event class
    class Event{
        - m_id: int
        - m_type: EventType
        - m_name: string
        - m_timestamp: int
        - m_duration: int

        + get_id()
        + get_name()
        + get_type()
        + get_timestamp()
        + set_duration()
        + get_duration(int/float duration)
        - get_info_str()
        - __str__()
        - __repr__()
    }

    ' Event class for operators (single device operator)
    class OprtEvent{}

    ' Event class for communications, 
    ' including devcie-to-device, device-to-cpu, inter-node 
    class CommEvent{}

    ' Event class for pipeline-level events
    class FwdBwdEvent{
        - stage_id: int 
        - microbatch_id: int
        - chunk_id: int

        + get_stage_id()
        + get_microbatch_id()
        + get_chunk_id()
    }

    OprtEvent .up.|> Event
    CommEvent .up.|> Event
    FwdBwdEvent .left.|> Event

    ' Basic trace class
    class Trace{
        - m_ndevs: int
        ' m_events is a Dict<int, list<Event>>, the key is the device id and value is a Event list
        - m_events: dict<int, list<Event>>

        + get_ndevs()
        + add_event()
        ' How to search a specific event?
        + get_event() 
        + get_events(int stage_id)
    }

    Trace -down- Event

    ' Trace class for pipeline-level events
    ' The event type is FWD/BWD/WGT, and each event has no timestamp
    class PPTrace{
        - m_nstages: int
        - m_nmicrobatches: int
        - m_nchunks: int

        + get_nstages()
        + get_nmicrobatches()
        + get_nchunks()
    }
    FwdBwdEvent -up-* PPTrace
    PPTrace -right-|> Trace
}


namespace flow{
    interface FlowNode{
        -m_name: string
        -m_id: int
        ' The definition of input/output of FlowNode should be clear.
        -m_inputs: ?
        -m_outputs: ?

        +set_inputs()
        +set_outputs()
        +get_outputs()
        +get_inputs()
        ' Exact run the task of this FlowNode'
        +run()
    }
    class FlowGraph{
        ' Dict<int, FlowNode> m_nodes
        ' The key is the node id, the value is the node.
        +nodes: dict<int, FlowNode> 
        ' The key is the source node id, 
        ' the value is a List of the destination node ids.
        +edges: dict<int, list<int>>>
        
        +add_node(FlowNode)
        +add_edge(FlowNode src, FlowNode dst)
        +get_node_by_id(int id)
        +get_next_nodelist_by_id(int id)
        +check()
        +run()

    }
    FlowNode --* FlowGraph 
}

namespace reader {
    class TraceReader{
        - m_trace: Trace

        + __init__()
        + readTrace(file_name)
        + getTrace()
    }   

        class TorchProfilerTraceReader{

    }

    TorchProfilerTraceReader -up-|> TraceReader
}

namespace analyzer{
    class TraceAnalyzer{
        - m_trace: Trace

        + __init__()
        + analyze()
    }
}

namespace visualizer{
    class TraceVisualizer{}
}

TraceReader .left.|> FlowNode
TraceAnalyzer .left.|> FlowNode
TraceVisualizer .left.|> FlowNode

Trace -right- TraceReader
Trace -right- TraceVisualizer
Trace -right- TraceAnalyzer



namespace simulator {

    class Simulator{}

    Simulator ..|> FlowNode

    namespace oprt {
        class OprtSimulator{}
        OprtSimulator -left-|> Simulator
    }

    namespace comm {
        class CommSimulator{}
        CommSimulator -right-|> Simulator
    }

    namespace pipeline{

        namespace pipeline_repr{
            '/ PPGraph: FwdBwdEvent (w/o. timestamp) -> Node, pipeline streams -> Graph /'
            class PPGraph{
                - m_nstages: int
                - m_nmicrobatches: int
                - m_nchunks: int
                - m_nnodes: int
                - m_nodes: dict<int, FwdBwdEvent>

                + getNodeId()
                + addNodes()
                + addEdge()
                + generateNodes()
            }

            class GPipeGraph{
                + buildGraph()
            }

            class PipeDreamGraph{
                + buildGraph()
            }

            class Interleaved1F1BGraph{
                + buildGraph()
            }
            
            GPipeGraph -down-|> PPGraph
            PipeDreamGraph -down-|> PPGraph
            Interleaved1F1BGraph -down-|> PPGraph


            ' PPGraph -down-|> Trace
            PPGraph -down- FwdBwdEvent : The FwdBwdEvent in PPGraph has no timestamp
        }

            Enum PipeType{
                GPipe
                PipeDream
                Interleaved1F1B
                ZeroBubble
                Customized
            }

            Enum PipePartitionType{
                Balanced
                Customized
            }



            class PipeConfig{
                - edges: list<pair<src, dst>>

                + getEdges(file_name)
            }

            class PipePartitionConfig{
                - plan: dict<stage_id, nlayers>

                + getPlan(file_name)
            }

            class PPSimulator{
                - m_pipe_type: PipeType
                - m_pipe_config: PipeConfig

                - m_pipe_partition: PipePartitionType
                - m_pipe_partition_config: PipePartitionConfig


                + __init__()
                + generateTrace()
            }

            PipeType -down- PPSimulator
            PipeConfig -down-* PPSimulator

            PipePartitionType -down- PPSimulator
            PipePartitionConfig -down-* PPSimulator


     

    }

    namespace dptp{    
        
        namespace dptp_repr{
            class DPGraph{}
            class TPGraph{}
            class TPDPGraph{}

            DPGraph -down-|> Trace
            TPGraph -down-|> Trace
            TPDPGraph -down-|> Trace
        }

        class DPSimulator{}
        class TPSimulator{}

        TPSimulator -right-* TPGraph
        DPSimulator -right-* DPGraph
        TPDPSimulator -left-* TPDPGraph

        DPSimulator -down-|> Simulator
        TPSimulator -down-|> Simulator
        PPSimulator -down-|> Simulator
    }

}


PPSimulator *-left- PPTrace

namespace trace_op {

    class TraceConverter {
        - m_input_trace: PPTrace
        - m_from_type: PipeType
        - m_to_type: PipeType

        + convert()
        + run()
    }

    TraceConverter -up-|> FlowNode
}


@enduml